Node.mill() {
	if this node has no piece, return false
	find Nodes farLeft and farUp
	to find farLeft, check the left node until the left link is null
	to find farUp, check the up node until the up link is null
	if farLeft, its right node, and its right right node have the same piece, return true
	if farUp, its down node, and its down down node have the same piece, return true
	otherwise return false
	//All nodes are part of a horizontal and vertical row of 3.  This covers all cases.
}

GetWinner method is called every turn
GetWinner() {
	if player 1 has no available moves
		return player 2
	if player 2 has no available moves
		return player 1
}

Gui checks every turn to see if there are any valid moves available
if not then it calls gameOver()
gameOver() {
	GetsWinner
	Displays Winner animation
	sets MovesBlocked to true // to stop any further gameplay
	sets game display status to prompt player to start a new game
}

AI
When instantiated, the AI gets a reference to the game, board, etc
When it is the AI player's turn to make a move, it is directed to do so with
the AI.doNextMove() method. This method looks at what the expected move is and
applies a specific algorithm for that type of move. When the AI object is
instantiated, the difficulty level is passed as a boolean (hardMode):
Place:
  if hardMode {
    //Attempt to form a mill:
    for each spot, s, on the board {
      if (s is a potential mill for AI) {
        place a piece on s
        return
      }
    }
    //If no mills can be formed, attempt to block mills:
    for each spot, s, on the board {
      if (s is a potential mill for the opponent) {
        place a piece on s
        return
      } 
    }
  }
  //if easy mode or no mills formed or blocked, place a piece on the intersection 
  //with the greatest number of open neighbors:
  initialize variable for the best spot (best) = -1 
  initialize variable for how many neighbors best has (bestNeighbors) = -1
  for each spot, s, on the board {
    if s is occupied, continue to next iteration of loop
    sNeighbors = count the number of open neighbors s has
    if sNeighbors > bestNeighbors {
      best = s
      bestNeighbors = sNeighbors
    }
  }
  Place a piece on the best spot found (best)

Move:
  Make a copy of the game board, to test potential moves
  for every piece, p owned by the AI {
    for each open spot around n, s, on the copy {
      move p to spot s, on the copy
      if (spot s is now part of a mill) {
        move p to s on the real board
        return
      }
      undo the move on the copy board
    }
  }
  // If no mills can be formed:
  // If hardMode, try to form a mill by flying
  If hardMode and AI player can fly (3 or fewer pieces left on the board) {
    for open spot s, on the board {
      if s is a potential mill for the AI player {
        // Find a piece that can be moved to s to form a mill
        for each piece p, owned by the AI {
          move p to spot s, on the copy board
          if spot s is now part of a mill {
            move p to s on the real board
            return
          }
          undo the move on the copy board
        }
      }
    }
  }
  
  // Easy mode or flying couldn't create a mill:
  if AI player can fly {
    move a random piece to a random spot (flying)
  }
  else, move a random piece to a random adjacent spot
  
Remove:
  Create a list of all opponent pieces
  try { Remove a random opponent piece }
  catch (illegal move) { 
    This piece can't be removed, so do nothing
    The AI will keep being asked to remove a piece until it finds a valid one 
  }
  
None:
  The game is over, so do nothing

"Is spot s a potential mill for player p?":
(Description: Return true if placing a piece here will form a mill for p,
Otherwise, return false)
  If s is occupied, return false
  left = the leftmost spot in s's row:
    for (left = s; left.left != null; left = left.left);
  top = the topmost spot in s's column:
    for (left = s; left.left != null; left = left.left);
  hCount = the number of spots player p owns in s's row:
    Move left to the right, one spot at a time, incrementing hCount if p owns it
  if hCount == 2, return true
  vCount = the number of spots player p owns in s's column:
    move top downward, one spot at a time, incrementing vCount if p owns it
  if vCount == 2, return true
  return false
  