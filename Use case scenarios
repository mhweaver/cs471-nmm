Easy AI - Scenario
1. The player clicks on the "Easy AI" radio button.
2. The program starts a new game.
3. White is a new human player, Black is a new Easy AI player.

Hard AI - Scenario
1. The player clicks on the "Hard AI" radio button.
2. The program starts a new game.
3. White is a new human player, Black is a new Hard AI player.

Player - Scenario
1. The player clicks on the "2 Player" radio button.
2. The program starts a new game.
3. White is a new human player, Black is a new human player.

Place Piece - A Possible Use Case Scenario
1. Player 1 clicks on node in top left corner of board.
2. :GUI asks :Game if node is valid
3. :Game asks :Node which player selected node belongs to
4. :Node returns null
5. :Game returns success
6. :Gui asks :Game for updated :Board.
7. :Game returns :Board
8. :GUI re-draws board with Player 1's piece on node 
   in top left corner.
   
Move Piece - A Possible Scenario
1. Player 1 selects one of their pieces to move
2. :GUI asks :Game if selected piece is valid
3. :Game asks :Node who owns node of selected piece
4. :Node returns Player 1
5. :Game returns success
6. :Gui asks game for updated :Board
7. :Game returns :Board
8. :GUI re-draws board with selected piece highlighted
7. Player 1 selects a valid destination to move piece too
8. :Gui asks :Game if destination is valid
9. :Game asks :Node who owns node
10.:Node returns null
11. :Game returns success
12. :GUI asks :Game for updated :Board
13. :Game returns :Board
14: :Gui re-draws board to include moved piece
   
Remove Piece - Scenario - Should use :GUI, :Game, :Board, :Node, :Player 
1. Player 1 clicks the node they wish to remove
2. :GUI asks :Game for the :Node corresponding to where Player 1 clicked
3. :Game returns the requested :Node object
4. :GUI asks Game to do a remove move on that :Node
5. :Board asks :Node for its :Player object
6. :Node returns Player 2's :Player
7. :Game informs :Player that it's getting a piece removed 
8. :Player returns
9. :Game asks :Node to remove its player and become "selected"
10. :Node returns
11. :Game asks both :Players if they have available moves
12. Both :Players return true
13. :Game returns (remove move is complete)
14. :GUI asks :Game for :Board and both :Players
15. :Game returns :Board and :Players
16. :GUI redraws board, based on :Board and :Players, then awaits input

New Game - Scenario - Should use :GUI, :Game, :Board, :Player
1. Player clicks the New Game button
2. :GUI creates a new :Game instance
3. :Game creates new :Board
4. :Board creates 24 new :Nodes
5. :Board sets up each :Node with its location information and neighbors
6. :Each :Node returns
7. The new :Board returns
8. :Game creates 2 new :Players
9. :Game asks :Players to set their colors and names
10. The new :Players return
11. The new :Game returns
12. :GUI asks :Game for player 2's :Player 
13. :GUI creates a new :AI using :Game and player2:Player
14. New :AI returns
15. :GUI requests the current :Board from :Game
16. :Game returns :Board
17. :GUI redraws the board, based on the :Board object
18. :GUI awaits input

Exit - Scenario
1. Player clicks the Exit button
2. :GUI immediately terminates the process, with exit code 0



